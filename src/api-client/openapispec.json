{
  "openapi": "3.0.0",
  "paths": {
    "/api/auth/login": {
      "get": {
        "operationId": "AuthenticationController_login",
        "summary": "Used to start OIDC authentication.",
        "parameters": [
          {
            "required": false,
            "name": "redirectUrl",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection to orchestrate OIDC flow."
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/logout": {
      "get": {
        "operationId": "AuthenticationController_logout",
        "summary": "Used to log out the current user.",
        "parameters": [],
        "responses": {
          "302": {
            "description": "Redirect to logout."
          },
          "500": {
            "description": "Internal server error while trying to log out."
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/auth/logininfo": {
      "get": {
        "operationId": "AuthenticationController_info",
        "summary": "Info about logged in user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns info about the logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserinfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is not logged in."
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/api/personen": {
      "post": {
        "operationId": "PersonController_createPerson",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonBodyParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The person was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonendatensatzResponse"
                }
              }
            }
          },
          "400": {
            "description": "A username was given. Creation with username is not supported"
          },
          "401": {
            "description": "Not authorized to create the person."
          },
          "403": {
            "description": "Insufficient permissions to create the person."
          },
          "500": {
            "description": "Internal server error while creating the person."
          }
        },
        "tags": [
          "personen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "PersonController_findPersons",
        "parameters": [
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The offset of the paginated list.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The requested limit for the page size.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "referrer",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "familienname",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "vorname",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "sichtfreigabe",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "default": "nein",
              "enum": [
                "ja",
                "nein"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The persons were successfully returned. WARNING: This endpoint returns all persons as default when no paging parameters were set.",
            "headers": {
              "X-Paging-Offset": {
                "description": "The offset of the first item from the list. List starts with index 0."
              },
              "X-Paging-Limit": {
                "description": "The maximum amount of items returned in one request."
              },
              "X-Paging-Total": {
                "description": "The total amount of items in the list."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonendatensatzResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to get persons."
          },
          "403": {
            "description": "Insufficient permissions to get persons."
          },
          "500": {
            "description": "Internal server error while getting all persons."
          }
        },
        "tags": [
          "personen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/personen/{personId}": {
      "get": {
        "operationId": "PersonController_findPersonById",
        "parameters": [
          {
            "name": "personId",
            "required": true,
            "in": "path",
            "description": "The id for the account.",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The person was successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonendatensatzResponse"
                }
              }
            }
          },
          "400": {
            "description": "Person ID is required"
          },
          "401": {
            "description": "Not authorized to get the person."
          },
          "403": {
            "description": "Insufficient permissions to get the person."
          },
          "404": {
            "description": "The person does not exist."
          },
          "500": {
            "description": "Internal server error while getting the person."
          }
        },
        "tags": [
          "personen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "PersonController_updatePerson",
        "parameters": [
          {
            "name": "personId",
            "required": true,
            "in": "path",
            "description": "The id for the account.",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonBodyParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The person was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonendatensatzResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request has wrong format."
          },
          "401": {
            "description": "Request is not authorized."
          },
          "403": {
            "description": "Insufficient permissions to perform operation."
          },
          "404": {
            "description": "The person was not found."
          },
          "500": {
            "description": "An internal server error occurred."
          }
        },
        "tags": [
          "personen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/personen/{personId}/personenkontexte": {
      "post": {
        "operationId": "PersonController_createPersonenkontext",
        "parameters": [
          {
            "name": "personId",
            "required": true,
            "in": "path",
            "description": "The id for the account.",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonenkontextBodyParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The personenkontext was successfully created."
          },
          "400": {
            "description": "The personenkontext already exists."
          },
          "401": {
            "description": "Not authorized to create the personenkontext."
          },
          "403": {
            "description": "Not permitted to create the personenkontext."
          },
          "500": {
            "description": "Internal server error while creating the personenkontext."
          }
        },
        "tags": [
          "personen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "PersonController_findPersonenkontexte",
        "parameters": [
          {
            "name": "personId",
            "required": true,
            "in": "path",
            "description": "The id for the account.",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The offset of the paginated list.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The requested limit for the page size.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "referrer",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "rolle",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "enum": [
                "LERN",
                "LEHR",
                "EXTERN",
                "ORGADMIN",
                "LEIT",
                "SYSADMIN"
              ],
              "type": "string"
            }
          },
          {
            "name": "personenstatus",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "enum": [
                "AKTIV"
              ],
              "type": "string"
            }
          },
          {
            "name": "sichtfreigabe",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "default": "nein",
              "enum": [
                "ja",
                "nein"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The personenkontexte were successfully pulled.",
            "headers": {
              "X-Paging-Offset": {
                "description": "The offset of the first item from the list. List starts with index 0."
              },
              "X-Paging-Limit": {
                "description": "The maximum amount of items returned in one request."
              },
              "X-Paging-Total": {
                "description": "The total amount of items in the list."
              }
            }
          },
          "401": {
            "description": "Not authorized to get personenkontexte."
          },
          "403": {
            "description": "Insufficient permissions to get personenkontexte."
          },
          "404": {
            "description": "No personenkontexte were found."
          },
          "500": {
            "description": "Internal server error while getting all personenkontexte."
          }
        },
        "tags": [
          "personen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/personen/{personId}/password": {
      "patch": {
        "operationId": "PersonController_resetPasswordByPersonId",
        "parameters": [
          {
            "name": "personId",
            "required": true,
            "in": "path",
            "description": "The id for the account.",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Password for person was successfully reset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The person does not exist."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "personen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/personen-frontend": {
      "get": {
        "operationId": "PersonFrontendController_findPersons",
        "parameters": [
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The offset of the paginated list.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The requested limit for the page size.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "referrer",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "familienname",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "vorname",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "sichtfreigabe",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "default": "nein",
              "enum": [
                "ja",
                "nein"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The persons were successfully returned. WARNING: This endpoint returns all persons as default when no paging parameters were set.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RawPagedResponse"
                    },
                    {
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PersonendatensatzResponse"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to get persons."
          },
          "403": {
            "description": "Insufficient permissions to get persons."
          },
          "500": {
            "description": "Internal server error while getting all persons."
          }
        },
        "tags": [
          "personen-frontend"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/organisationen": {
      "post": {
        "operationId": "OrganisationController_createOrganisation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganisationBodyParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organisation was successfully created."
          },
          "400": {
            "description": "The organisation already exists."
          },
          "401": {
            "description": "Not authorized to create the organisation."
          },
          "403": {
            "description": "Not permitted to create the organisation."
          },
          "500": {
            "description": "Internal server error while creating the organisation."
          }
        },
        "tags": [
          "organisationen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "OrganisationController_findOrganizations",
        "parameters": [
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The offset of the paginated list.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The requested limit for the page size.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "kennung",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "type": "string"
            }
          },
          {
            "name": "typ",
            "required": false,
            "in": "query",
            "schema": {
              "nullable": true,
              "default": "SONSTIGE ORGANISATION / EINRICHTUNG",
              "enum": [
                "SCHULE",
                "ANBIETER",
                "SONSTIGE ORGANISATION / EINRICHTUNG",
                "UNBESTAETIGT"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The organizations were successfully returned.",
            "headers": {
              "X-Paging-Offset": {
                "description": "The offset of the first item from the list. List starts with index 0."
              },
              "X-Paging-Limit": {
                "description": "The maximum amount of items returned in one request."
              },
              "X-Paging-Total": {
                "description": "The total amount of items in the list."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganisationResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to get organizations."
          },
          "403": {
            "description": "Insufficient permissions to get organizations."
          },
          "500": {
            "description": "Internal server error while getting all organizations."
          }
        },
        "tags": [
          "organisationen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/organisationen/{organisationId}": {
      "put": {
        "operationId": "OrganisationController_updateOrganisation",
        "parameters": [
          {
            "name": "organisationId",
            "required": true,
            "in": "path",
            "description": "The id of an organization",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganisationBodyParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The organisation was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request has wrong format."
          },
          "401": {
            "description": "Request is not authorized."
          },
          "403": {
            "description": "Insufficient permissions to perform operation."
          },
          "404": {
            "description": "The organisation was not found."
          },
          "500": {
            "description": "An internal server error occurred."
          }
        },
        "tags": [
          "organisationen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "OrganisationController_findOrganisationById",
        "parameters": [
          {
            "name": "organisationId",
            "required": true,
            "in": "path",
            "description": "The id of an organization",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The organization was successfully pulled."
          },
          "400": {
            "description": "Organization ID is required"
          },
          "401": {
            "description": "Not authorized to get the organization."
          },
          "403": {
            "description": "Insufficient permissions to get the organization."
          },
          "404": {
            "description": "The organization does not exist."
          },
          "500": {
            "description": "Internal server error while getting the organization."
          }
        },
        "tags": [
          "organisationen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/organisationen/root": {
      "get": {
        "operationId": "OrganisationController_getRootOrganisation",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The organization was successfully pulled."
          },
          "401": {
            "description": "Not authorized to get the organization."
          },
          "403": {
            "description": "Insufficient permissions to get the organization."
          },
          "404": {
            "description": "The organization does not exist."
          },
          "500": {
            "description": "Internal server error while getting the organization."
          }
        },
        "tags": [
          "organisationen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/organisationen/{organisationId}/administriert": {
      "get": {
        "operationId": "OrganisationController_getAdministrierteOrganisationen",
        "parameters": [
          {
            "name": "organisationId",
            "required": true,
            "in": "path",
            "description": "The id of an organization",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The organizations were successfully returned.",
            "headers": {
              "X-Paging-Offset": {
                "description": "The offset of the first item from the list. List starts with index 0."
              },
              "X-Paging-Limit": {
                "description": "The maximum amount of items returned in one request."
              },
              "X-Paging-Total": {
                "description": "The total amount of items in the list."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganisationResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to get organizations."
          },
          "403": {
            "description": "Insufficient permissions to get organizations."
          },
          "500": {
            "description": "Internal server error while getting all organizations."
          }
        },
        "tags": [
          "organisationen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "OrganisationController_addAdministrierteOrganisation",
        "parameters": [
          {
            "name": "organisationId",
            "required": true,
            "in": "path",
            "description": "The id of an organization",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationByIdBodyParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organisation was successfully updated."
          },
          "400": {
            "description": "The organisation could not be modified."
          },
          "401": {
            "description": "Not authorized to modify the organisation."
          },
          "403": {
            "description": "Not permitted to modify the organisation."
          },
          "500": {
            "description": "Internal server error while modifying the organisation."
          }
        },
        "tags": [
          "organisationen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/organisationen/{organisationId}/zugehoerig": {
      "get": {
        "operationId": "OrganisationController_getZugehoerigeOrganisationen",
        "parameters": [
          {
            "name": "organisationId",
            "required": true,
            "in": "path",
            "description": "The id of an organization",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The organizations were successfully returned.",
            "headers": {
              "X-Paging-Offset": {
                "description": "The offset of the first item from the list. List starts with index 0."
              },
              "X-Paging-Limit": {
                "description": "The maximum amount of items returned in one request."
              },
              "X-Paging-Total": {
                "description": "The total amount of items in the list."
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganisationResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to get organizations."
          },
          "403": {
            "description": "Insufficient permissions to get organizations."
          },
          "500": {
            "description": "Internal server error while getting all organizations."
          }
        },
        "tags": [
          "organisationen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "OrganisationController_addZugehoerigeOrganisation",
        "parameters": [
          {
            "name": "organisationId",
            "required": true,
            "in": "path",
            "description": "The id of an organization",
            "schema": {
              "nullable": false,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationByIdBodyParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organisation was successfully updated."
          },
          "400": {
            "description": "The organisation could not be modified."
          },
          "401": {
            "description": "Not authorized to modify the organisation."
          },
          "403": {
            "description": "Not permitted to modify the organisation."
          },
          "500": {
            "description": "Internal server error while modifying the organisation."
          }
        },
        "tags": [
          "organisationen"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/rolle": {
      "get": {
        "operationId": "RolleController_findRollen",
        "summary": "",
        "description": "List all rollen.",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Not authorized to get rollen."
          },
          "403": {
            "description": "Insufficient permissions to get rollen."
          },
          "500": {
            "description": "Internal server error while getting all rollen."
          }
        },
        "tags": [
          "rolle"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "RolleController_createRolle",
        "summary": "",
        "description": "Create a new rolle.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRolleBodyParams"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The rolle was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolleResponse"
                }
              }
            }
          },
          "400": {
            "description": "The input was not valid."
          },
          "401": {
            "description": "Not authorized to create the rolle."
          },
          "403": {
            "description": "Insufficient permissions to create the rolle."
          },
          "500": {
            "description": "Internal server error while creating the person."
          }
        },
        "tags": [
          "rolle"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/provider": {
      "get": {
        "operationId": "ProviderController_getServiceProvidersByPersonId",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceProviderResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authorized to get available service providers."
          }
        },
        "tags": [
          "provider"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "dBildungs IAM",
    "description": "The dBildungs IAM server API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "password": {
            "tokenUrl": "http://127.0.0.1:8080/realms/SPSH/protocol/openid-connect/token",
            "scopes": {}
          }
        }
      },
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "UserinfoResponse": {
        "type": "object",
        "properties": {
          "sub": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "given_name": {
            "type": "string",
            "nullable": true
          },
          "family_name": {
            "type": "string",
            "nullable": true
          },
          "middle_name": {
            "type": "string",
            "nullable": true
          },
          "nickname": {
            "type": "string",
            "nullable": true
          },
          "preferred_username": {
            "type": "string",
            "nullable": true
          },
          "profile": {
            "type": "string",
            "nullable": true
          },
          "picture": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "email_verified": {
            "type": "boolean",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "birthdate": {
            "type": "string",
            "nullable": true
          },
          "zoneinfo": {
            "type": "string",
            "nullable": true
          },
          "locale": {
            "type": "string",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "type": "number",
            "nullable": true
          }
        },
        "required": [
          "sub",
          "name",
          "given_name",
          "family_name",
          "middle_name",
          "nickname",
          "preferred_username",
          "profile",
          "picture",
          "website",
          "email",
          "email_verified",
          "gender",
          "birthdate",
          "zoneinfo",
          "locale",
          "phone_number",
          "updated_at"
        ]
      },
      "PersonNameParams": {
        "type": "object",
        "properties": {
          "familienname": {
            "type": "string"
          },
          "vorname": {
            "type": "string"
          },
          "initialenfamilienname": {
            "type": "string"
          },
          "initialenvorname": {
            "type": "string"
          },
          "rufname": {
            "type": "string"
          },
          "titel": {
            "type": "string"
          },
          "anrede": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "namenssuffix": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "namenspraefix": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sortierindex": {
            "type": "string"
          }
        },
        "required": [
          "familienname",
          "vorname"
        ]
      },
      "PersonBirthParams": {
        "type": "object",
        "properties": {
          "datum": {
            "format": "date-time",
            "type": "string"
          },
          "geburtsort": {
            "type": "string"
          }
        }
      },
      "CreatePersonBodyParams": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "referrer": {
            "type": "string"
          },
          "stammorganisation": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/PersonNameParams"
          },
          "geburt": {
            "$ref": "#/components/schemas/PersonBirthParams"
          },
          "geschlecht": {
            "type": "string",
            "enum": [
              "m",
              "w",
              "d",
              "x"
            ]
          },
          "lokalisierung": {
            "type": "string"
          },
          "vertrauensstufe": {
            "type": "string",
            "enum": [
              "KEIN",
              "UNBE",
              "TEIL",
              "VOLL"
            ]
          },
          "auskunftssperre": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "PersonResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "referrer": {
            "type": "string"
          },
          "mandant": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/PersonNameParams"
          },
          "geburt": {
            "$ref": "#/components/schemas/PersonBirthParams"
          },
          "stammorganisation": {
            "type": "string"
          },
          "geschlecht": {
            "type": "string"
          },
          "lokalisierung": {
            "type": "string"
          },
          "vertrauensstufe": {
            "type": "string",
            "enum": [
              "KEIN",
              "UNBE",
              "TEIL",
              "VOLL"
            ]
          },
          "revision": {
            "type": "string"
          },
          "startpasswort": {
            "type": "string",
            "description": "Initiales Benutzerpasswort, muss nach der ersten Anmeldung geändert werden"
          }
        },
        "required": [
          "id",
          "referrer",
          "mandant",
          "name",
          "geburt",
          "stammorganisation",
          "geschlecht",
          "lokalisierung",
          "vertrauensstufe",
          "revision",
          "startpasswort"
        ]
      },
      "CreatedPersonenkontextOrganisationDto": {
        "type": "object",
        "properties": {}
      },
      "LoeschungResponse": {
        "type": "object",
        "properties": {
          "zeitpunkt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "zeitpunkt"
        ]
      },
      "PersonenkontextResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "referrer": {
            "type": "string"
          },
          "mandant": {
            "type": "string"
          },
          "organisation": {
            "$ref": "#/components/schemas/CreatedPersonenkontextOrganisationDto"
          },
          "rolle": {
            "type": "string"
          },
          "personenstatus": {
            "type": "string"
          },
          "jahrgangsstufe": {
            "type": "string"
          },
          "sichtfreigabe": {
            "type": "string"
          },
          "loeschung": {
            "$ref": "#/components/schemas/LoeschungResponse"
          },
          "revision": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "referrer",
          "mandant",
          "organisation",
          "rolle",
          "personenstatus",
          "jahrgangsstufe",
          "sichtfreigabe",
          "loeschung",
          "revision"
        ]
      },
      "PersonendatensatzResponse": {
        "type": "object",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/PersonResponse"
          },
          "personenkontexte": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonenkontextResponse"
            }
          }
        },
        "required": [
          "person",
          "personenkontexte"
        ]
      },
      "CreatePersonenkontextBodyParams": {
        "type": "object",
        "properties": {
          "referrer": {
            "type": "string"
          },
          "rolle": {
            "type": "string",
            "enum": [
              "LERN",
              "LEHR",
              "EXTERN",
              "ORGADMIN",
              "LEIT",
              "SYSADMIN"
            ]
          },
          "personenstatus": {
            "type": "string",
            "enum": [
              "AKTIV"
            ]
          },
          "jahrgangsstufe": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09",
              "10"
            ]
          }
        },
        "required": [
          "rolle"
        ]
      },
      "UpdatePersonBodyParams": {
        "type": "object",
        "properties": {
          "referrer": {
            "type": "string"
          },
          "stammorganisation": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/PersonNameParams"
          },
          "geburt": {
            "$ref": "#/components/schemas/PersonBirthParams"
          },
          "geschlecht": {
            "type": "string",
            "enum": [
              "m",
              "w",
              "d",
              "x"
            ]
          },
          "lokalisierung": {
            "type": "string"
          },
          "vertrauensstufe": {
            "type": "string",
            "enum": [
              "KEIN",
              "UNBE",
              "TEIL",
              "VOLL"
            ]
          },
          "auskunftssperre": {
            "type": "boolean"
          },
          "revision": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "revision"
        ]
      },
      "RawPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number"
          },
          "offset": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "total",
          "offset",
          "limit",
          "items"
        ]
      },
      "CreateOrganisationBodyParams": {
        "type": "object",
        "properties": {
          "administriertVon": {
            "type": "string"
          },
          "zugehoerigZu": {
            "type": "string"
          },
          "kennung": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namensergaenzung": {
            "type": "string"
          },
          "kuerzel": {
            "type": "string"
          },
          "typ": {
            "type": "string",
            "enum": [
              "SCHULE",
              "ANBIETER",
              "SONSTIGE ORGANISATION / EINRICHTUNG",
              "UNBESTAETIGT"
            ]
          },
          "traegerschaft": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06"
            ]
          }
        },
        "required": [
          "kennung",
          "name",
          "namensergaenzung",
          "kuerzel",
          "typ"
        ]
      },
      "UpdateOrganisationBodyParams": {
        "type": "object",
        "properties": {
          "administriertVon": {
            "type": "string"
          },
          "zugehoerigZu": {
            "type": "string"
          },
          "kennung": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namensergaenzung": {
            "type": "string"
          },
          "kuerzel": {
            "type": "string"
          },
          "typ": {
            "type": "string",
            "enum": [
              "SCHULE",
              "ANBIETER",
              "SONSTIGE ORGANISATION / EINRICHTUNG",
              "UNBESTAETIGT"
            ]
          },
          "traegerschaft": {
            "type": "string",
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06"
            ]
          }
        },
        "required": [
          "kennung",
          "name",
          "namensergaenzung",
          "kuerzel",
          "typ"
        ]
      },
      "OrganisationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kennung": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "namensergaenzung": {
            "type": "string"
          },
          "kuerzel": {
            "type": "string"
          },
          "typ": {
            "type": "string",
            "enum": [
              "SCHULE",
              "ANBIETER",
              "SONSTIGE ORGANISATION / EINRICHTUNG",
              "UNBESTAETIGT"
            ]
          }
        },
        "required": [
          "id",
          "kennung",
          "name",
          "namensergaenzung",
          "kuerzel",
          "typ"
        ]
      },
      "OrganisationByIdBodyParams": {
        "type": "object",
        "properties": {
          "organisationId": {
            "type": "string",
            "description": "The id of an organization",
            "nullable": false
          }
        },
        "required": [
          "organisationId"
        ]
      },
      "CreateRolleBodyParams": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "administeredBySchulstrukturknoten": {
            "type": "string"
          },
          "rollenart": {
            "type": "string",
            "enum": [
              "LERN",
              "LEHR",
              "EXTERN",
              "ORGADMIN",
              "LEIT",
              "SYSADMIN"
            ]
          },
          "merkmale": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "BEFRISTUNG_PFLICHT",
                "KOPERS_PFLICHT"
              ]
            }
          }
        },
        "required": [
          "name",
          "administeredBySchulstrukturknoten",
          "rollenart",
          "merkmale"
        ]
      },
      "RolleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "administeredBySchulstrukturknoten": {
            "type": "string"
          },
          "rollenart": {
            "type": "string",
            "enum": [
              "LERN",
              "LEHR",
              "EXTERN",
              "ORGADMIN",
              "LEIT",
              "SYSADMIN"
            ]
          },
          "merkmale": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "BEFRISTUNG_PFLICHT",
                "KOPERS_PFLICHT"
              ]
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "administeredBySchulstrukturknoten",
          "rollenart",
          "merkmale"
        ]
      },
      "ServiceProviderResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "url"
        ]
      }
    }
  }
}
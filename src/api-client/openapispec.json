{
    "openapi": "3.0.0",
    "paths": {
        "/api/auth/login": {
            "get": {
                "operationId": "AuthenticationController_login",
                "summary": "Used to start OIDC authentication.",
                "parameters": [
                    {
                        "required": false,
                        "name": "redirectUrl",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirection to orchestrate OIDC flow."
                    }
                },
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/auth/logout": {
            "get": {
                "operationId": "AuthenticationController_logout",
                "summary": "Used to log out the current user.",
                "parameters": [],
                "responses": {
                    "302": {
                        "description": "Redirect to logout."
                    },
                    "500": {
                        "description": "Internal server error while trying to log out."
                    }
                },
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/auth/logininfo": {
            "get": {
                "operationId": "AuthenticationController_info",
                "summary": "Info about logged in user.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Returns info about the logged in user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserinfoResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User is not logged in."
                    }
                },
                "tags": [
                    "auth"
                ]
            }
        },
        "/api/personen": {
            "post": {
                "operationId": "PersonController_createPerson",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePersonBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The person was successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonendatensatzResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A username was given. Creation with username is not supported"
                    },
                    "401": {
                        "description": "Not authorized to create the person."
                    },
                    "403": {
                        "description": "Insufficient permissions to create the person."
                    },
                    "500": {
                        "description": "Internal server error while creating the person."
                    }
                },
                "tags": [
                    "personen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "get": {
                "operationId": "PersonController_findPersons",
                "parameters": [
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The offset of the paginated list.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "The requested limit for the page size.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "referrer",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "familienname",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "vorname",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "sichtfreigabe",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "default": "nein",
                            "enum": [
                                "ja",
                                "nein"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The persons were successfully returned. WARNING: This endpoint returns all persons as default when no paging parameters were set.",
                        "headers": {
                            "X-Paging-Offset": {
                                "description": "The offset of the first item from the list. List starts with index 0."
                            },
                            "X-Paging-Limit": {
                                "description": "The maximum amount of items returned in one request."
                            },
                            "X-Paging-Total": {
                                "description": "The total amount of items in the list."
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PersonendatensatzResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get persons."
                    },
                    "403": {
                        "description": "Insufficient permissions to get persons."
                    },
                    "500": {
                        "description": "Internal server error while getting all persons."
                    }
                },
                "tags": [
                    "personen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/personen/{personId}": {
            "get": {
                "operationId": "PersonController_findPersonById",
                "parameters": [
                    {
                        "name": "personId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the account.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The person was successfully returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonendatensatzResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Person ID is required"
                    },
                    "401": {
                        "description": "Not authorized to get the person."
                    },
                    "403": {
                        "description": "Insufficient permissions to get the person."
                    },
                    "404": {
                        "description": "The person does not exist."
                    },
                    "500": {
                        "description": "Internal server error while getting the person."
                    }
                },
                "tags": [
                    "personen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "operationId": "PersonController_updatePerson",
                "parameters": [
                    {
                        "name": "personId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the account.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePersonBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The person was successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonendatensatzResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request has wrong format."
                    },
                    "401": {
                        "description": "Request is not authorized."
                    },
                    "403": {
                        "description": "Insufficient permissions to perform operation."
                    },
                    "404": {
                        "description": "The person was not found."
                    },
                    "500": {
                        "description": "An internal server error occurred."
                    }
                },
                "tags": [
                    "personen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/personen/{personId}/personenkontexte": {
            "post": {
                "operationId": "PersonController_createPersonenkontext",
                "parameters": [
                    {
                        "name": "personId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the account.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePersonenkontextBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The personenkontext was successfully created."
                    },
                    "400": {
                        "description": "The personenkontext already exists."
                    },
                    "401": {
                        "description": "Not authorized to create the personenkontext."
                    },
                    "403": {
                        "description": "Not permitted to create the personenkontext."
                    },
                    "500": {
                        "description": "Internal server error while creating the personenkontext."
                    }
                },
                "tags": [
                    "personen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "get": {
                "operationId": "PersonController_findPersonenkontexte",
                "parameters": [
                    {
                        "name": "personId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the account.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The offset of the paginated list.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "The requested limit for the page size.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "referrer",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "rolle",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "enum": [
                                "LERN",
                                "LEHR",
                                "EXTERN",
                                "ORGADMIN",
                                "LEIT",
                                "SYSADMIN"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "personenstatus",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "enum": [
                                "AKTIV"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "sichtfreigabe",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "default": "nein",
                            "enum": [
                                "ja",
                                "nein"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The personenkontexte were successfully pulled.",
                        "headers": {
                            "X-Paging-Offset": {
                                "description": "The offset of the first item from the list. List starts with index 0."
                            },
                            "X-Paging-Limit": {
                                "description": "The maximum amount of items returned in one request."
                            },
                            "X-Paging-Total": {
                                "description": "The total amount of items in the list."
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/RawPagedResponse"
                                        },
                                        {
                                            "required": [
                                                "items"
                                            ],
                                            "properties": {
                                                "items": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/PersonenkontextResponse"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get personenkontexte."
                    },
                    "403": {
                        "description": "Insufficient permissions to get personenkontexte."
                    },
                    "404": {
                        "description": "No personenkontexte were found."
                    },
                    "500": {
                        "description": "Internal server error while getting all personenkontexte."
                    }
                },
                "tags": [
                    "personen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/personen/{personId}/password": {
            "patch": {
                "operationId": "PersonController_resetPasswordByPersonId",
                "parameters": [
                    {
                        "name": "personId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the account.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Password for person was successfully reset.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The person does not exist."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                },
                "tags": [
                    "personen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/personen-frontend": {
            "get": {
                "operationId": "PersonFrontendController_findPersons",
                "parameters": [
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The offset of the paginated list.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "The requested limit for the page size.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "referrer",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "familienname",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "vorname",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "sichtfreigabe",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "default": "nein",
                            "enum": [
                                "ja",
                                "nein"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The persons were successfully returned. WARNING: This endpoint returns all persons as default when no paging parameters were set.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/RawPagedResponse"
                                        },
                                        {
                                            "required": [
                                                "items"
                                            ],
                                            "properties": {
                                                "items": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/PersonendatensatzResponse"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get persons."
                    },
                    "403": {
                        "description": "Insufficient permissions to get persons."
                    },
                    "500": {
                        "description": "Internal server error while getting all persons."
                    }
                },
                "tags": [
                    "personen-frontend"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/dbiam/personenuebersicht": {
            "get": {
                "operationId": "DBiamPersonenuebersichtController_findPersonenuebersichten",
                "parameters": [
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The offset of the paginated list.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "The requested limit for the page size.",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The personenuebersichten were successfully returned.",
                        "headers": {
                            "X-Paging-Offset": {
                                "description": "The offset of the first item from the list. List starts with index 0."
                            },
                            "X-Paging-Limit": {
                                "description": "The maximum amount of items returned in one request."
                            },
                            "X-Paging-Total": {
                                "description": "The total amount of items in the list."
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/RawPagedResponse"
                                        },
                                        {
                                            "required": [
                                                "items"
                                            ],
                                            "properties": {
                                                "items": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/DBiamPersonenuebersichtResponse"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get personenuebersichten."
                    },
                    "403": {
                        "description": "Insufficient permission to get personenuebersichten."
                    },
                    "500": {
                        "description": "Internal server error while getting personenuebersichten."
                    }
                },
                "tags": [
                    "dbiam-personenuebersicht"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/dbiam/personenuebersicht/{personId}": {
            "get": {
                "operationId": "DBiamPersonenuebersichtController_findPersonenuebersichtenByPerson",
                "parameters": [
                    {
                        "name": "personId",
                        "required": true,
                        "in": "path",
                        "description": "The ID for the person.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The personenuebersichten were successfully returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBiamPersonenuebersichtResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get personenuebersicht."
                    },
                    "403": {
                        "description": "Insufficient permission to get personenuebersicht."
                    },
                    "500": {
                        "description": "Internal server error while getting personenuebersicht."
                    }
                },
                "tags": [
                    "dbiam-personenuebersicht"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/personenkontexte/{personenkontextId}": {
            "get": {
                "operationId": "PersonenkontextController_findPersonenkontextById",
                "parameters": [
                    {
                        "name": "personenkontextId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the personenkontext.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The personenkontext was successfully returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonendatensatzResponseAutomapper"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request has wrong format."
                    },
                    "401": {
                        "description": "Request is not authorized."
                    },
                    "403": {
                        "description": "Insufficient permissions to perform operation."
                    },
                    "404": {
                        "description": "The personenkontext was not found."
                    },
                    "500": {
                        "description": "An internal server error occurred."
                    }
                },
                "tags": [
                    "personenkontexte"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "put": {
                "operationId": "PersonenkontextController_updatePersonenkontextWithId",
                "parameters": [
                    {
                        "name": "personenkontextId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the personenkontext.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePersonenkontextBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The personenkontext was successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonenkontextResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request has wrong format."
                    },
                    "401": {
                        "description": "Request is not authorized."
                    },
                    "403": {
                        "description": "Insufficient permissions to perform operation."
                    },
                    "404": {
                        "description": "The personenkontext was not found."
                    },
                    "500": {
                        "description": "An internal server error occurred."
                    }
                },
                "tags": [
                    "personenkontexte"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "operationId": "PersonenkontextController_deletePersonenkontextById",
                "parameters": [
                    {
                        "name": "personenkontextId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the personenkontext.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeleteRevisionBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The personenkontext was successfully deleted."
                    },
                    "400": {
                        "description": "Request has wrong format."
                    },
                    "401": {
                        "description": "Request is not authorized."
                    },
                    "403": {
                        "description": "Insufficient permissions to perform operation."
                    },
                    "404": {
                        "description": "The personenkontext was not found."
                    },
                    "500": {
                        "description": "An internal server error occurred."
                    }
                },
                "tags": [
                    "personenkontexte"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/personenkontexte": {
            "get": {
                "operationId": "PersonenkontextController_findPersonenkontexte",
                "parameters": [
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The offset of the paginated list.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "The requested limit for the page size.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "referrer",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "rolle",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "enum": [
                                "LERN",
                                "LEHR",
                                "EXTERN",
                                "ORGADMIN",
                                "LEIT",
                                "SYSADMIN"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "personenstatus",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "enum": [
                                "AKTIV"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "sichtfreigabe",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "default": "nein",
                            "enum": [
                                "ja",
                                "nein"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The personenkontexte were successfully returned.",
                        "headers": {
                            "X-Paging-Offset": {
                                "description": "The offset of the first item from the list. List starts with index 0."
                            },
                            "X-Paging-Limit": {
                                "description": "The maximum amount of items returned in one request."
                            },
                            "X-Paging-Total": {
                                "description": "The total amount of items in the list."
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PersonendatensatzResponseAutomapper"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request has wrong format."
                    },
                    "401": {
                        "description": "Request is not authorized."
                    },
                    "403": {
                        "description": "Insufficient permissions to perform operation."
                    },
                    "404": {
                        "description": "The personenkontexte were not found."
                    },
                    "500": {
                        "description": "An internal server error occurred."
                    }
                },
                "tags": [
                    "personenkontexte"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/personenkontexte/{personId}/hatSystemrecht": {
            "get": {
                "operationId": "PersonenkontextController_hatSystemRecht",
                "parameters": [
                    {
                        "name": "personId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the account.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemRecht",
                        "required": true,
                        "in": "query",
                        "schema": {
                            "enum": [
                                "ROLLEN_VERWALTEN"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The SchulStrukturKnoten associated with this personId and systemrecht. Can return empty list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemrechtResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The systemrecht could not be found (does not exist as type of systemrecht)."
                    }
                },
                "tags": [
                    "personenkontexte"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/dbiam/personenkontext/{personId}": {
            "get": {
                "operationId": "DBiamPersonenkontextController_findPersonenkontextsByPerson",
                "parameters": [
                    {
                        "name": "personId",
                        "required": true,
                        "in": "path",
                        "description": "The ID for the person.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The personenkontexte were successfully returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DBiamPersonenkontextResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get available personenkontexte."
                    },
                    "403": {
                        "description": "Insufficient permission to get personenkontexte for this user."
                    },
                    "500": {
                        "description": "Internal server error while getting personenkontexte."
                    }
                },
                "tags": [
                    "dbiam-personenkontexte"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/dbiam/personenkontext": {
            "post": {
                "operationId": "DBiamPersonenkontextController_createPersonenkontext",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DBiamCreatePersonenkontextBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Test",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DBiamPersonenkontextResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to create personenkontext."
                    },
                    "403": {
                        "description": "Insufficient permission to create personenkontext."
                    },
                    "500": {
                        "description": "Internal server error while creating personenkontext."
                    }
                },
                "tags": [
                    "dbiam-personenkontexte"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/personenkontext/rollen": {
            "get": {
                "operationId": "DbiamPersonenkontextFilterController_findRollen",
                "parameters": [
                    {
                        "name": "rolleName",
                        "required": true,
                        "in": "query",
                        "description": "Rolle name used to filter for rollen in personenkontext.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "The limit of items for the request.",
                        "schema": {
                            "nullable": false,
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The rollen for a personenkontext were successfully returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FindRollenResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get available rolen for personenkontexte."
                    },
                    "403": {
                        "description": "Insufficient permission to get rollen for personenkontext."
                    },
                    "500": {
                        "description": "Internal server error while getting rollen for personenkontexte."
                    }
                },
                "tags": [
                    "personenkontext"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/personenkontext/schulstrukturknoten": {
            "get": {
                "operationId": "DbiamPersonenkontextFilterController_findSchulstrukturknoten",
                "parameters": [
                    {
                        "name": "rolleId",
                        "required": true,
                        "in": "query",
                        "description": "RolleId used to filter for schulstrukturknoten in personenkontext.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    },
                    {
                        "name": "sskName",
                        "required": true,
                        "in": "query",
                        "description": "Organisation/SSK name used to filter for schulstrukturknoten in personenkontext.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "The limit of items for the request.",
                        "schema": {
                            "nullable": false,
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The schulstrukturknoten for a personenkontext were successfully returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FindSchulstrukturknotenResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get available schulstrukturknoten for personenkontexte."
                    },
                    "403": {
                        "description": "Insufficient permission to get schulstrukturknoten for personenkontext."
                    },
                    "500": {
                        "description": "Internal server error while getting schulstrukturknoten for personenkontexte."
                    }
                },
                "tags": [
                    "personenkontext"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/organisationen": {
            "post": {
                "operationId": "OrganisationController_createOrganisation",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrganisationBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The organisation was successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganisationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The organisation already exists."
                    },
                    "401": {
                        "description": "Not authorized to create the organisation."
                    },
                    "403": {
                        "description": "Not permitted to create the organisation."
                    },
                    "500": {
                        "description": "Internal server error while creating the organisation."
                    }
                },
                "tags": [
                    "organisationen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "get": {
                "operationId": "OrganisationController_findOrganizations",
                "parameters": [
                    {
                        "name": "offset",
                        "required": false,
                        "in": "query",
                        "description": "The offset of the paginated list.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "The requested limit for the page size.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "kennung",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "type": "string"
                        }
                    },
                    {
                        "name": "typ",
                        "required": false,
                        "in": "query",
                        "schema": {
                            "nullable": true,
                            "default": "SONSTIGE ORGANISATION / EINRICHTUNG",
                            "enum": [
                                "TRAEGER",
                                "SCHULE",
                                "ANBIETER",
                                "SONSTIGE ORGANISATION / EINRICHTUNG",
                                "UNBESTAETIGT"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The organizations were successfully returned.",
                        "headers": {
                            "X-Paging-Offset": {
                                "description": "The offset of the first item from the list. List starts with index 0."
                            },
                            "X-Paging-Limit": {
                                "description": "The maximum amount of items returned in one request."
                            },
                            "X-Paging-Total": {
                                "description": "The total amount of items in the list."
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganisationResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get organizations."
                    },
                    "403": {
                        "description": "Insufficient permissions to get organizations."
                    },
                    "500": {
                        "description": "Internal server error while getting all organizations."
                    }
                },
                "tags": [
                    "organisationen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/organisationen/{organisationId}": {
            "put": {
                "operationId": "OrganisationController_updateOrganisation",
                "parameters": [
                    {
                        "name": "organisationId",
                        "required": true,
                        "in": "path",
                        "description": "The id of an organization",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrganisationBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The organisation was successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganisationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request has wrong format."
                    },
                    "401": {
                        "description": "Request is not authorized."
                    },
                    "403": {
                        "description": "Insufficient permissions to perform operation."
                    },
                    "404": {
                        "description": "The organisation was not found."
                    },
                    "500": {
                        "description": "An internal server error occurred."
                    }
                },
                "tags": [
                    "organisationen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "get": {
                "operationId": "OrganisationController_findOrganisationById",
                "parameters": [
                    {
                        "name": "organisationId",
                        "required": true,
                        "in": "path",
                        "description": "The id of an organization",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The organization was successfully pulled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganisationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Organization ID is required"
                    },
                    "401": {
                        "description": "Not authorized to get the organization."
                    },
                    "403": {
                        "description": "Insufficient permissions to get the organization."
                    },
                    "404": {
                        "description": "The organization does not exist."
                    },
                    "500": {
                        "description": "Internal server error while getting the organization."
                    }
                },
                "tags": [
                    "organisationen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/organisationen/root": {
            "get": {
                "operationId": "OrganisationController_getRootOrganisation",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The organization was successfully pulled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganisationResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get the organization."
                    },
                    "403": {
                        "description": "Insufficient permissions to get the organization."
                    },
                    "404": {
                        "description": "The organization does not exist."
                    },
                    "500": {
                        "description": "Internal server error while getting the organization."
                    }
                },
                "tags": [
                    "organisationen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/organisationen/{organisationId}/administriert": {
            "get": {
                "operationId": "OrganisationController_getAdministrierteOrganisationen",
                "parameters": [
                    {
                        "name": "organisationId",
                        "required": true,
                        "in": "path",
                        "description": "The id of an organization",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The organizations were successfully returned.",
                        "headers": {
                            "X-Paging-Offset": {
                                "description": "The offset of the first item from the list. List starts with index 0."
                            },
                            "X-Paging-Limit": {
                                "description": "The maximum amount of items returned in one request."
                            },
                            "X-Paging-Total": {
                                "description": "The total amount of items in the list."
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganisationResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get organizations."
                    },
                    "403": {
                        "description": "Insufficient permissions to get organizations."
                    },
                    "500": {
                        "description": "Internal server error while getting all organizations."
                    }
                },
                "tags": [
                    "organisationen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "operationId": "OrganisationController_addAdministrierteOrganisation",
                "parameters": [
                    {
                        "name": "organisationId",
                        "required": true,
                        "in": "path",
                        "description": "The id of an organization",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganisationByIdBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The organisation was successfully updated."
                    },
                    "400": {
                        "description": "The organisation could not be modified."
                    },
                    "401": {
                        "description": "Not authorized to modify the organisation."
                    },
                    "403": {
                        "description": "Not permitted to modify the organisation."
                    },
                    "500": {
                        "description": "Internal server error while modifying the organisation."
                    }
                },
                "tags": [
                    "organisationen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/organisationen/{organisationId}/zugehoerig": {
            "get": {
                "operationId": "OrganisationController_getZugehoerigeOrganisationen",
                "parameters": [
                    {
                        "name": "organisationId",
                        "required": true,
                        "in": "path",
                        "description": "The id of an organization",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The organizations were successfully returned.",
                        "headers": {
                            "X-Paging-Offset": {
                                "description": "The offset of the first item from the list. List starts with index 0."
                            },
                            "X-Paging-Limit": {
                                "description": "The maximum amount of items returned in one request."
                            },
                            "X-Paging-Total": {
                                "description": "The total amount of items in the list."
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/OrganisationResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get organizations."
                    },
                    "403": {
                        "description": "Insufficient permissions to get organizations."
                    },
                    "500": {
                        "description": "Internal server error while getting all organizations."
                    }
                },
                "tags": [
                    "organisationen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "operationId": "OrganisationController_addZugehoerigeOrganisation",
                "parameters": [
                    {
                        "name": "organisationId",
                        "required": true,
                        "in": "path",
                        "description": "The id of an organization",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganisationByIdBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The organisation was successfully updated."
                    },
                    "400": {
                        "description": "The organisation could not be modified."
                    },
                    "401": {
                        "description": "Not authorized to modify the organisation."
                    },
                    "403": {
                        "description": "Not permitted to modify the organisation."
                    },
                    "500": {
                        "description": "Internal server error while modifying the organisation."
                    }
                },
                "tags": [
                    "organisationen"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/rolle": {
            "get": {
                "operationId": "RolleController_findRollen",
                "summary": "",
                "description": "List all rollen.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The rollen were successfully returned",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RolleResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get rollen."
                    },
                    "403": {
                        "description": "Insufficient permissions to get rollen."
                    },
                    "500": {
                        "description": "Internal server error while getting all rollen."
                    }
                },
                "tags": [
                    "rolle"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "operationId": "RolleController_createRolle",
                "summary": "",
                "description": "Create a new rolle.",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRolleBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The rolle was successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The input was not valid."
                    },
                    "401": {
                        "description": "Not authorized to create the rolle."
                    },
                    "403": {
                        "description": "Insufficient permissions to create the rolle."
                    },
                    "500": {
                        "description": "Internal server error while creating the rolle."
                    }
                },
                "tags": [
                    "rolle"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/rolle/{rolleId}": {
            "patch": {
                "operationId": "RolleController_addSystemRecht",
                "summary": "",
                "description": "Add systemrecht to a rolle.",
                "parameters": [
                    {
                        "name": "rolleId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the rolle.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddSystemrechtBodyParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The systemrecht was successfully added to rolle."
                    },
                    "400": {
                        "description": "The input was not valid."
                    },
                    "401": {
                        "description": "Not authorized to create the rolle."
                    },
                    "403": {
                        "description": "Insufficient permissions to create the rolle."
                    },
                    "500": {
                        "description": "Internal server error while adding systemrecht to rolle."
                    }
                },
                "tags": [
                    "rolle"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/rolle/{rolleId}/serviceProviders": {
            "get": {
                "operationId": "RolleController_getRolleServiceProviderIds",
                "summary": "",
                "description": "Get service-providers for a rolle by its id.",
                "parameters": [
                    {
                        "name": "rolleId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the rolle.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of service-provider ids.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolleServiceProviderResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to retrieve service-providers for rolle."
                    },
                    "404": {
                        "description": "The rolle does not exist."
                    }
                },
                "tags": [
                    "rolle"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "operationId": "RolleController_addServiceProviderById",
                "summary": "",
                "description": "Add a service-provider to a rolle by id.",
                "parameters": [
                    {
                        "name": "rolleId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the rolle.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RolleServiceProviderQueryParams"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Adding service-provider finished successfully."
                    },
                    "400": {
                        "description": "The service-provider is already attached to rolle."
                    },
                    "401": {
                        "description": "Not authorized to retrieve service-providers for rolle."
                    },
                    "404": {
                        "description": "The rolle or the service-provider to add does not exist."
                    }
                },
                "tags": [
                    "rolle"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "delete": {
                "operationId": "RolleController_removeServiceProviderById",
                "summary": "",
                "description": "Remove a service-provider from a rolle by id.",
                "parameters": [
                    {
                        "name": "rolleId",
                        "required": true,
                        "in": "path",
                        "description": "The id for the rolle.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceProviderId",
                        "required": true,
                        "in": "query",
                        "description": "The id for the rolle.",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Removing service-provider finished successfully."
                    },
                    "401": {
                        "description": "Not authorized to retrieve service-providers for rolle."
                    },
                    "404": {
                        "description": "The rolle or the service-provider that should be removed does not exist."
                    }
                },
                "tags": [
                    "rolle"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/provider": {
            "get": {
                "operationId": "ProviderController_getAllServiceProviders",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The service-providers were successfully returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceProviderResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized to get available service providers."
                    },
                    "403": {
                        "description": "Insufficient permissions to get service-providers."
                    },
                    "500": {
                        "description": "Internal server error while getting all service-providers."
                    }
                },
                "tags": [
                    "provider"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/provider/{angebotId}/logo": {
            "get": {
                "operationId": "ProviderController_getServiceProviderLogo",
                "parameters": [
                    {
                        "name": "angebotId",
                        "required": true,
                        "in": "path",
                        "description": "The id of the service provider",
                        "schema": {
                            "nullable": false,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The logo for the service provider was successfully returned.",
                        "content": {
                            "image/*": {
                                "schema": {
                                    "type": "file",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Angebot ID is required."
                    },
                    "401": {
                        "description": "Not authorized to get service provider logo."
                    },
                    "403": {
                        "description": "Insufficient permissions to get the logo."
                    },
                    "404": {
                        "description": "The service-provider does not exist or has no logo."
                    },
                    "500": {
                        "description": "Internal server error while getting the logo."
                    }
                },
                "tags": [
                    "provider"
                ],
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        }
    },
    "info": {
        "title": "dBildungs IAM",
        "description": "The dBildungs IAM server API description",
        "version": "1.0",
        "contact": {}
    },
    "tags": [],
    "servers": [],
    "components": {
        "securitySchemes": {
            "oauth2": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "tokenUrl": "http://127.0.0.1:8080/realms/SPSH/protocol/openid-connect/token",
                        "scopes": {}
                    }
                }
            },
            "bearer": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http"
            }
        },
        "schemas": {
            "UserinfoResponse": {
                "type": "object",
                "properties": {
                    "sub": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "given_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "family_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "middle_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "nickname": {
                        "type": "string",
                        "nullable": true
                    },
                    "preferred_username": {
                        "type": "string",
                        "nullable": true
                    },
                    "profile": {
                        "type": "string",
                        "nullable": true
                    },
                    "picture": {
                        "type": "string",
                        "nullable": true
                    },
                    "website": {
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "type": "string",
                        "nullable": true
                    },
                    "email_verified": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "gender": {
                        "type": "string",
                        "nullable": true
                    },
                    "birthdate": {
                        "type": "string",
                        "nullable": true
                    },
                    "zoneinfo": {
                        "type": "string",
                        "nullable": true
                    },
                    "locale": {
                        "type": "string",
                        "nullable": true
                    },
                    "phone_number": {
                        "type": "string",
                        "nullable": true
                    },
                    "updated_at": {
                        "type": "number",
                        "nullable": true
                    },
                    "personId": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": [
                    "sub",
                    "name",
                    "given_name",
                    "family_name",
                    "middle_name",
                    "nickname",
                    "preferred_username",
                    "profile",
                    "picture",
                    "website",
                    "email",
                    "email_verified",
                    "gender",
                    "birthdate",
                    "zoneinfo",
                    "locale",
                    "phone_number",
                    "updated_at",
                    "personId"
                ]
            },
            "PersonNameParams": {
                "type": "object",
                "properties": {
                    "familienname": {
                        "type": "string"
                    },
                    "vorname": {
                        "type": "string"
                    },
                    "initialenfamilienname": {
                        "type": "string"
                    },
                    "initialenvorname": {
                        "type": "string"
                    },
                    "rufname": {
                        "type": "string"
                    },
                    "titel": {
                        "type": "string"
                    },
                    "anrede": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "namenssuffix": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "namenspraefix": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sortierindex": {
                        "type": "string"
                    }
                },
                "required": [
                    "familienname",
                    "vorname"
                ]
            },
            "PersonBirthParams": {
                "type": "object",
                "properties": {
                    "datum": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "geburtsort": {
                        "type": "string"
                    }
                }
            },
            "CreatePersonBodyParams": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "referrer": {
                        "type": "string"
                    },
                    "stammorganisation": {
                        "type": "string"
                    },
                    "name": {
                        "$ref": "#/components/schemas/PersonNameParams"
                    },
                    "geburt": {
                        "$ref": "#/components/schemas/PersonBirthParams"
                    },
                    "geschlecht": {
                        "type": "string",
                        "enum": [
                            "m",
                            "w",
                            "d",
                            "x"
                        ]
                    },
                    "lokalisierung": {
                        "type": "string"
                    },
                    "vertrauensstufe": {
                        "type": "string",
                        "enum": [
                            "KEIN",
                            "UNBE",
                            "TEIL",
                            "VOLL"
                        ]
                    },
                    "auskunftssperre": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name"
                ]
            },
            "PersonResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "referrer": {
                        "type": "string"
                    },
                    "mandant": {
                        "type": "string"
                    },
                    "name": {
                        "$ref": "#/components/schemas/PersonNameParams"
                    },
                    "geburt": {
                        "$ref": "#/components/schemas/PersonBirthParams"
                    },
                    "stammorganisation": {
                        "type": "string"
                    },
                    "geschlecht": {
                        "type": "string"
                    },
                    "lokalisierung": {
                        "type": "string"
                    },
                    "vertrauensstufe": {
                        "type": "string",
                        "enum": [
                            "KEIN",
                            "UNBE",
                            "TEIL",
                            "VOLL"
                        ]
                    },
                    "revision": {
                        "type": "string"
                    },
                    "startpasswort": {
                        "type": "string",
                        "description": "Initiales Benutzerpasswort, muss nach der ersten Anmeldung geändert werden"
                    }
                },
                "required": [
                    "id",
                    "referrer",
                    "mandant",
                    "name",
                    "geburt",
                    "stammorganisation",
                    "geschlecht",
                    "lokalisierung",
                    "vertrauensstufe",
                    "revision",
                    "startpasswort"
                ]
            },
            "PersonendatensatzResponse": {
                "type": "object",
                "properties": {
                    "person": {
                        "$ref": "#/components/schemas/PersonResponse"
                    }
                },
                "required": [
                    "person"
                ]
            },
            "CreatePersonenkontextBodyParams": {
                "type": "object",
                "properties": {
                    "referrer": {
                        "type": "string"
                    },
                    "rolle": {
                        "type": "string",
                        "enum": [
                            "LERN",
                            "LEHR",
                            "EXTERN",
                            "ORGADMIN",
                            "LEIT",
                            "SYSADMIN"
                        ]
                    },
                    "personenstatus": {
                        "type": "string",
                        "enum": [
                            "AKTIV"
                        ]
                    },
                    "jahrgangsstufe": {
                        "type": "string",
                        "enum": [
                            "01",
                            "02",
                            "03",
                            "04",
                            "05",
                            "06",
                            "07",
                            "08",
                            "09",
                            "10"
                        ]
                    }
                },
                "required": [
                    "rolle"
                ]
            },
            "RawPagedResponse": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "number"
                    },
                    "offset": {
                        "type": "number"
                    },
                    "limit": {
                        "type": "number"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "total",
                    "offset",
                    "limit",
                    "items"
                ]
            },
            "CreatedPersonenkontextOrganisationDto": {
                "type": "object",
                "properties": {}
            },
            "LoeschungResponse": {
                "type": "object",
                "properties": {
                    "zeitpunkt": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "required": [
                    "zeitpunkt"
                ]
            },
            "PersonenkontextResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "referrer": {
                        "type": "string"
                    },
                    "mandant": {
                        "type": "string"
                    },
                    "organisation": {
                        "$ref": "#/components/schemas/CreatedPersonenkontextOrganisationDto"
                    },
                    "rolle": {
                        "type": "string"
                    },
                    "personenstatus": {
                        "type": "string"
                    },
                    "jahrgangsstufe": {
                        "type": "string"
                    },
                    "sichtfreigabe": {
                        "type": "string"
                    },
                    "loeschung": {
                        "$ref": "#/components/schemas/LoeschungResponse"
                    },
                    "revision": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "referrer",
                    "mandant",
                    "organisation",
                    "rolle",
                    "personenstatus",
                    "jahrgangsstufe",
                    "sichtfreigabe",
                    "loeschung",
                    "revision"
                ]
            },
            "UpdatePersonBodyParams": {
                "type": "object",
                "properties": {
                    "referrer": {
                        "type": "string"
                    },
                    "stammorganisation": {
                        "type": "string"
                    },
                    "name": {
                        "$ref": "#/components/schemas/PersonNameParams"
                    },
                    "geburt": {
                        "$ref": "#/components/schemas/PersonBirthParams"
                    },
                    "geschlecht": {
                        "type": "string",
                        "enum": [
                            "m",
                            "w",
                            "d",
                            "x"
                        ]
                    },
                    "lokalisierung": {
                        "type": "string"
                    },
                    "vertrauensstufe": {
                        "type": "string",
                        "enum": [
                            "KEIN",
                            "UNBE",
                            "TEIL",
                            "VOLL"
                        ]
                    },
                    "auskunftssperre": {
                        "type": "boolean"
                    },
                    "revision": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "revision"
                ]
            },
            "DBiamPersonenzuordnungResponse": {
                "type": "object",
                "properties": {
                    "sskId": {
                        "type": "string"
                    },
                    "rolleId": {
                        "type": "string"
                    },
                    "sskName": {
                        "type": "string"
                    },
                    "sskDstNr": {
                        "type": "string"
                    },
                    "rolle": {
                        "type": "string"
                    }
                },
                "required": [
                    "sskId",
                    "rolleId",
                    "sskName",
                    "sskDstNr",
                    "rolle"
                ]
            },
            "DBiamPersonenuebersichtResponse": {
                "type": "object",
                "properties": {
                    "personId": {
                        "type": "string"
                    },
                    "vorname": {
                        "type": "string"
                    },
                    "nachname": {
                        "type": "string"
                    },
                    "benutzername": {
                        "type": "string"
                    },
                    "zuordnungen": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DBiamPersonenzuordnungResponse"
                        }
                    }
                },
                "required": [
                    "personId",
                    "vorname",
                    "nachname",
                    "benutzername",
                    "zuordnungen"
                ]
            },
            "PersonResponseAutomapper": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "referrer": {
                        "type": "string"
                    },
                    "mandant": {
                        "type": "string"
                    },
                    "name": {
                        "$ref": "#/components/schemas/PersonNameParams"
                    },
                    "geburt": {
                        "$ref": "#/components/schemas/PersonBirthParams"
                    },
                    "stammorganisation": {
                        "type": "string"
                    },
                    "geschlecht": {
                        "type": "string"
                    },
                    "lokalisierung": {
                        "type": "string"
                    },
                    "vertrauensstufe": {
                        "type": "string",
                        "enum": [
                            "KEIN",
                            "UNBE",
                            "TEIL",
                            "VOLL"
                        ]
                    },
                    "revision": {
                        "type": "string"
                    },
                    "startpasswort": {
                        "type": "string",
                        "description": "Initiales Benutzerpasswort, muss nach der ersten Anmeldung geändert werden"
                    }
                },
                "required": [
                    "id",
                    "referrer",
                    "mandant",
                    "name",
                    "geburt",
                    "stammorganisation",
                    "geschlecht",
                    "lokalisierung",
                    "vertrauensstufe",
                    "revision",
                    "startpasswort"
                ]
            },
            "PersonendatensatzResponseAutomapper": {
                "type": "object",
                "properties": {
                    "person": {
                        "$ref": "#/components/schemas/PersonResponseAutomapper"
                    },
                    "personenkontexte": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonenkontextResponse"
                        }
                    }
                },
                "required": [
                    "person",
                    "personenkontexte"
                ]
            },
            "OrganisationResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "kennung": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namensergaenzung": {
                        "type": "string"
                    },
                    "kuerzel": {
                        "type": "string"
                    },
                    "typ": {
                        "type": "string",
                        "enum": [
                            "TRAEGER",
                            "SCHULE",
                            "ANBIETER",
                            "SONSTIGE ORGANISATION / EINRICHTUNG",
                            "UNBESTAETIGT"
                        ]
                    }
                },
                "required": [
                    "id",
                    "kennung",
                    "name",
                    "namensergaenzung",
                    "kuerzel",
                    "typ"
                ]
            },
            "SystemrechtResponse": {
                "type": "object",
                "properties": {
                    "ROLLEN_VERWALTEN": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganisationResponse"
                        }
                    }
                },
                "required": [
                    "ROLLEN_VERWALTEN"
                ]
            },
            "UpdatePersonenkontextBodyParams": {
                "type": "object",
                "properties": {
                    "referrer": {
                        "type": "string",
                        "description": "The new referrer of the personenkontext."
                    },
                    "personenstatus": {
                        "type": "string",
                        "enum": [
                            "AKTIV"
                        ],
                        "description": "The new personenstatus of the personenkontext."
                    },
                    "jahrgangsstufe": {
                        "type": "string",
                        "enum": [
                            "01",
                            "02",
                            "03",
                            "04",
                            "05",
                            "06",
                            "07",
                            "08",
                            "09",
                            "10"
                        ],
                        "description": "The new jahrgangsstufe of the personenkontext."
                    },
                    "revision": {
                        "type": "string",
                        "description": "The revision of the personenkontext."
                    }
                },
                "required": [
                    "revision"
                ]
            },
            "DeleteRevisionBodyParams": {
                "type": "object",
                "properties": {
                    "revision": {
                        "type": "string",
                        "description": "The revision of a personenkontext.",
                        "nullable": false
                    }
                },
                "required": [
                    "revision"
                ]
            },
            "DBiamPersonenkontextResponse": {
                "type": "object",
                "properties": {
                    "personId": {
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "rolleId": {
                        "type": "string"
                    }
                },
                "required": [
                    "personId",
                    "organisationId",
                    "rolleId"
                ]
            },
            "DBiamCreatePersonenkontextBodyParams": {
                "type": "object",
                "properties": {
                    "personId": {
                        "type": "string"
                    },
                    "organisationId": {
                        "type": "string"
                    },
                    "rolleId": {
                        "type": "string"
                    }
                },
                "required": [
                    "personId",
                    "organisationId",
                    "rolleId"
                ]
            },
            "RolleResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "createdAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "updatedAt": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "administeredBySchulstrukturknoten": {
                        "type": "string"
                    },
                    "rollenart": {
                        "type": "string",
                        "enum": [
                            "LERN",
                            "LEHR",
                            "EXTERN",
                            "ORGADMIN",
                            "LEIT",
                            "SYSADMIN"
                        ]
                    },
                    "merkmale": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "BEFRISTUNG_PFLICHT",
                                "KOPERS_PFLICHT"
                            ]
                        }
                    },
                    "systemrechte": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "ROLLEN_VERWALTEN"
                            ]
                        }
                    }
                },
                "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "name",
                    "administeredBySchulstrukturknoten",
                    "rollenart",
                    "merkmale",
                    "systemrechte"
                ]
            },
            "FindRollenResponse": {
                "type": "object",
                "properties": {
                    "moeglicheRollen": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RolleResponse"
                        }
                    },
                    "total": {
                        "type": "number"
                    }
                },
                "required": [
                    "moeglicheRollen",
                    "total"
                ]
            },
            "FindSchulstrukturknotenResponse": {
                "type": "object",
                "properties": {
                    "moeglicheSkks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganisationResponse"
                        }
                    },
                    "total": {
                        "type": "number"
                    }
                },
                "required": [
                    "moeglicheSkks",
                    "total"
                ]
            },
            "CreateOrganisationBodyParams": {
                "type": "object",
                "properties": {
                    "administriertVon": {
                        "type": "string"
                    },
                    "zugehoerigZu": {
                        "type": "string"
                    },
                    "kennung": {
                        "type": "string",
                        "description": "Required, if `typ` is equal to `SCHULE`"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namensergaenzung": {
                        "type": "string"
                    },
                    "kuerzel": {
                        "type": "string"
                    },
                    "typ": {
                        "type": "string",
                        "enum": [
                            "TRAEGER",
                            "SCHULE",
                            "ANBIETER",
                            "SONSTIGE ORGANISATION / EINRICHTUNG",
                            "UNBESTAETIGT"
                        ]
                    },
                    "traegerschaft": {
                        "type": "string",
                        "enum": [
                            "01",
                            "02",
                            "03",
                            "04",
                            "05",
                            "06"
                        ]
                    }
                },
                "required": [
                    "name",
                    "typ"
                ]
            },
            "UpdateOrganisationBodyParams": {
                "type": "object",
                "properties": {
                    "administriertVon": {
                        "type": "string"
                    },
                    "zugehoerigZu": {
                        "type": "string"
                    },
                    "kennung": {
                        "type": "string",
                        "description": "Required, if `typ` is equal to `SCHULE`"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namensergaenzung": {
                        "type": "string"
                    },
                    "kuerzel": {
                        "type": "string"
                    },
                    "typ": {
                        "type": "string",
                        "enum": [
                            "TRAEGER",
                            "SCHULE",
                            "ANBIETER",
                            "SONSTIGE ORGANISATION / EINRICHTUNG",
                            "UNBESTAETIGT"
                        ]
                    },
                    "traegerschaft": {
                        "type": "string",
                        "enum": [
                            "01",
                            "02",
                            "03",
                            "04",
                            "05",
                            "06"
                        ]
                    }
                },
                "required": [
                    "name",
                    "typ"
                ]
            },
            "OrganisationByIdBodyParams": {
                "type": "object",
                "properties": {
                    "organisationId": {
                        "type": "string",
                        "description": "The id of an organization",
                        "nullable": false
                    }
                },
                "required": [
                    "organisationId"
                ]
            },
            "CreateRolleBodyParams": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "administeredBySchulstrukturknoten": {
                        "type": "string"
                    },
                    "rollenart": {
                        "type": "string",
                        "enum": [
                            "LERN",
                            "LEHR",
                            "EXTERN",
                            "ORGADMIN",
                            "LEIT",
                            "SYSADMIN"
                        ]
                    },
                    "merkmale": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "BEFRISTUNG_PFLICHT",
                                "KOPERS_PFLICHT"
                            ]
                        }
                    },
                    "systemrechte": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "ROLLEN_VERWALTEN"
                            ]
                        }
                    }
                },
                "required": [
                    "name",
                    "administeredBySchulstrukturknoten",
                    "rollenart",
                    "merkmale",
                    "systemrechte"
                ]
            },
            "AddSystemrechtBodyParams": {
                "type": "object",
                "properties": {
                    "systemRecht": {
                        "type": "string",
                        "enum": [
                            "ROLLEN_VERWALTEN"
                        ]
                    }
                },
                "required": [
                    "systemRecht"
                ]
            },
            "RolleServiceProviderResponse": {
                "type": "object",
                "properties": {
                    "serviceProviderIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "serviceProviderIds"
                ]
            },
            "RolleServiceProviderQueryParams": {
                "type": "object",
                "properties": {
                    "serviceProviderId": {
                        "type": "string",
                        "description": "The id for the rolle.",
                        "nullable": false
                    }
                },
                "required": [
                    "serviceProviderId"
                ]
            },
            "ServiceProviderKategorie": {
                "type": "string",
                "enum": [
                    "EMAIL",
                    "UNTERRICHT",
                    "VERWALTUNG",
                    "HINWEISE",
                    "ANGEBOTE"
                ]
            },
            "ServiceProviderResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "kategorie": {
                        "$ref": "#/components/schemas/ServiceProviderKategorie"
                    },
                    "hasLogo": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "url",
                    "kategorie",
                    "hasLogo"
                ]
            }
        }
    }
}